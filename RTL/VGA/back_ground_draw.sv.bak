//-- Alex Grinshpun Apr 2017
//-- Dudy Nov 13 2017
// System-Verilog version Alex Grinshpun May 2018
// coding convention dudy December 2018
// (c) Technion IIT, Department of Electrical Engineering 2019 


module	back_ground_draw	(	

					input	logic	clk,
					input	logic	resetN,
					input 	logic	[10:0]	pixelX,
					input 	logic	[10:0]	pixelY,

					output	logic	[7:0]	BG_RGB
);

const int	xFrameSize	=	639;
const int	yFrameSize	=	479;
const int	bracketOffset =	10;

logic [2:0] redBits;
logic [2:0] greenBits;
logic [1:0] blueBits;

localparam logic [2:0] DARK_COLOR = 3'b000 ;// bitmap of a dark color
localparam logic [2:0] LIGHT_COLOR = 3'b111 ;// bitmap of a light color
localparam  int OBJECT_WIDTH_X = 32;
localparam  int OBJECT_HEIGHT_Y = 32;

logic [0:OBJECT_WIDTH_X-1] [0:OBJECT_HEIGHT_Y-1] [8-1:0] object_colors = {
{8'h24, 8'h24, 8'h44, 8'h68, 8'h6D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h69, 8'h69, 8'h49, 8'h49, 8'h4E, 8'h49, 8'h29, 8'h4A, 8'h45, 8'h49, 8'h45, 8'h26, 8'h26, 8'h46, 8'h46, 8'h4E, 8'h4A, 8'h4A, 8'h4A, 8'h6A, 8'h6A, 8'h8F, 8'hB3 },
{8'h24, 8'h44, 8'h68, 8'h8D, 8'h8D, 8'h91, 8'hB1, 8'h8D, 8'h8D, 8'h6D, 8'h69, 8'h6D, 8'h4D, 8'h4E, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h45, 8'h4A, 8'h4A, 8'h46, 8'h4A, 8'h4A, 8'h4A, 8'h4F, 8'h6B, 8'h6A, 8'h6A, 8'h8B, 8'h8F },
{8'h44, 8'h68, 8'h6D, 8'h91, 8'hB1, 8'hB1, 8'hB1, 8'h91, 8'h8D, 8'h8D, 8'h6D, 8'h6D, 8'h69, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4F, 8'h4A, 8'h4A, 8'h4F, 8'h53, 8'h53, 8'h4F, 8'h73, 8'h6F, 8'h8B, 8'h8B },
{8'h44, 8'h69, 8'h91, 8'hB1, 8'hB5, 8'hD6, 8'hB5, 8'hB1, 8'h8D, 8'h8D, 8'h8D, 8'h8E, 8'h6D, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h6A, 8'h4F, 8'h4A, 8'h4A, 8'h4E, 8'h4F, 8'h4F, 8'h4F, 8'h97, 8'hBB, 8'h6F, 8'h6A },
{8'h49, 8'h6D, 8'hB1, 8'hB5, 8'hDA, 8'hDA, 8'hD6, 8'hB1, 8'h91, 8'h8D, 8'h8D, 8'h6D, 8'h6E, 8'h4E, 8'h4A, 8'h4E, 8'h4A, 8'h4A, 8'h4A, 8'h6A, 8'h6A, 8'h6F, 8'h4F, 8'h4F, 8'h4A, 8'h4A, 8'h4F, 8'h4F, 8'hB7, 8'hDB, 8'h6F, 8'h6A },
{8'h69, 8'h8D, 8'hB1, 8'hD5, 8'hDA, 8'hDB, 8'hDA, 8'hB5, 8'hB1, 8'h91, 8'h6D, 8'h6D, 8'h6E, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h6A, 8'h8E, 8'h8E, 8'h73, 8'h73, 8'h53, 8'h4F, 8'h4E, 8'h4F, 8'h4F, 8'h73, 8'h6F, 8'h6A, 8'h6A },
{8'h68, 8'h8D, 8'hB1, 8'hD6, 8'hDA, 8'hDB, 8'hDA, 8'hB6, 8'hB1, 8'h8D, 8'h8D, 8'h6D, 8'h69, 8'h4A, 8'h4A, 8'h49, 8'h49, 8'h4A, 8'h6A, 8'hB2, 8'hDB, 8'hB7, 8'h73, 8'h77, 8'h53, 8'h4F, 8'h4F, 8'h4F, 8'h4F, 8'h4A, 8'h4A, 8'h46 },
{8'h69, 8'h8D, 8'hB1, 8'hD5, 8'hDA, 8'hDA, 8'hDA, 8'hB6, 8'hB1, 8'h8D, 8'h8D, 8'h6D, 8'h6D, 8'h4A, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h6A, 8'hB2, 8'hFF, 8'hB7, 8'h73, 8'h57, 8'h53, 8'h4F, 8'h4E, 8'h4A, 8'h4A, 8'h4B, 8'h4A, 8'h46 },
{8'h69, 8'h8D, 8'hB1, 8'hB5, 8'hD6, 8'hD6, 8'hD6, 8'hB5, 8'hB1, 8'h8D, 8'h6D, 8'h6D, 8'h69, 8'h49, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h6A, 8'hB2, 8'hDB, 8'h97, 8'h73, 8'h57, 8'h2F, 8'h4F, 8'h4A, 8'h4A, 8'h46, 8'h4A, 8'h4A, 8'h46 },
{8'h69, 8'h8D, 8'hB1, 8'hB1, 8'hB6, 8'hB5, 8'hB1, 8'hB1, 8'hB1, 8'h8D, 8'h6D, 8'h6D, 8'h49, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h4A, 8'h6A, 8'h8E, 8'h92, 8'h73, 8'h53, 8'h4F, 8'h4F, 8'h4A, 8'h2A, 8'h4A, 8'h4A, 8'h46, 8'h46, 8'h46 },
{8'h69, 8'h8D, 8'h8D, 8'hB1, 8'hB1, 8'hB1, 8'hB6, 8'h91, 8'h8D, 8'h8D, 8'h6D, 8'h6D, 8'h49, 8'h4A, 8'h4A, 8'h49, 8'h4A, 8'h4A, 8'h6A, 8'h6A, 8'h4A, 8'h4F, 8'h4A, 8'h2B, 8'h2F, 8'h4F, 8'h2A, 8'h26, 8'h46, 8'h4A, 8'h4A, 8'h46 },
{8'h48, 8'h6D, 8'h8D, 8'h91, 8'h91, 8'hB1, 8'h91, 8'h91, 8'h8D, 8'h8D, 8'h6D, 8'h69, 8'h4A, 8'h4A, 8'h4E, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h6E, 8'h4A, 8'h2A, 8'h2F, 8'h4B, 8'h4A, 8'h2A, 8'h46, 8'h4A, 8'h46, 8'h46, 8'h46 },
{8'h49, 8'h6D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h6D, 8'h69, 8'h69, 8'h4A, 8'h6E, 8'h73, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h4A, 8'h4A, 8'h2A, 8'h4A, 8'h2E, 8'h2A, 8'h4A, 8'h4A, 8'h26, 8'h46, 8'h46, 8'h4A, 8'h46 },
{8'h49, 8'h69, 8'h6D, 8'h8D, 8'h8D, 8'h8D, 8'h8D, 8'h6D, 8'h6D, 8'h6E, 8'h6E, 8'h4E, 8'h4E, 8'h6E, 8'h73, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h26, 8'h4E, 8'h4A },
{8'h49, 8'h69, 8'h92, 8'h92, 8'h6D, 8'h6D, 8'h6D, 8'h6D, 8'h6D, 8'h6E, 8'h6E, 8'h72, 8'h52, 8'h4E, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h2E, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h4A, 8'h26 },
{8'h45, 8'h6D, 8'hDA, 8'hB6, 8'h6D, 8'h69, 8'h6D, 8'h69, 8'h6D, 8'h6E, 8'h4E, 8'h73, 8'h52, 8'h4A, 8'h4A, 8'h2A, 8'h2E, 8'h2E, 8'h53, 8'h32, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h4A, 8'h4A, 8'h26 },
{8'h45, 8'hB2, 8'hFB, 8'h92, 8'h6D, 8'h6D, 8'h6D, 8'h69, 8'h69, 8'h6A, 8'h4E, 8'h4E, 8'h2A, 8'h2A, 8'h2E, 8'h57, 8'h57, 8'h2E, 8'h33, 8'h2E, 8'h4E, 8'h4A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h26, 8'h26, 8'h4A, 8'h26, 8'h26 },
{8'h25, 8'h91, 8'hB6, 8'h6D, 8'h69, 8'h6D, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h4E, 8'h4E, 8'h2A, 8'h2A, 8'h2E, 8'h53, 8'h33, 8'h2A, 8'h2A, 8'h2A, 8'h4E, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h26, 8'h26, 8'h2A, 8'h26, 8'h26, 8'h26 },
{8'h25, 8'h49, 8'h6D, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h49, 8'h4E, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h52, 8'h2E, 8'h2E, 8'h2E, 8'h2A, 8'h4F, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h2A },
{8'h25, 8'h45, 8'h49, 8'h49, 8'h49, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h4A, 8'h2A, 8'h2F, 8'h33, 8'h2E, 8'h2E, 8'h2F, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h6E },
{8'h25, 8'h49, 8'h45, 8'h49, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h2E, 8'h4A, 8'h4E, 8'h2E, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h2A, 8'h2A, 8'h2E, 8'h2A, 8'h26, 8'h26, 8'h2A, 8'h2A, 8'h72 },
{8'h25, 8'h25, 8'h25, 8'h45, 8'h49, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h2E, 8'h2E, 8'h4E, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2F, 8'h2F, 8'h2A, 8'h4A, 8'h4A, 8'h2A, 8'h72 },
{8'h25, 8'h25, 8'h29, 8'h49, 8'h49, 8'h6E, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h4E, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2E, 8'h2F, 8'h2B, 8'h2F, 8'h2F, 8'h4E, 8'h4F, 8'h6F, 8'h73, 8'h4F, 8'h6E },
{8'h25, 8'h25, 8'h29, 8'h25, 8'h49, 8'h4A, 8'h4A, 8'h4A, 8'h2A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2F, 8'h2F, 8'h2F, 8'h2A, 8'h4F, 8'h6F, 8'h93, 8'h97, 8'h97, 8'h93, 8'h6E },
{8'h25, 8'h25, 8'h25, 8'h25, 8'h49, 8'h6A, 8'h4A, 8'h2A, 8'h2A, 8'h4A, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h33, 8'h2B, 8'h2F, 8'h2F, 8'h4A, 8'h6F, 8'h6F, 8'hB7, 8'hDB, 8'hDB, 8'hB7, 8'h72 },
{8'h25, 8'h25, 8'h25, 8'h25, 8'h49, 8'hB2, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h2A, 8'h37, 8'h2F, 8'h2A, 8'h2A, 8'h4E, 8'h4F, 8'h93, 8'hB7, 8'hDB, 8'hDB, 8'hB7, 8'h6E },
{8'h25, 8'h25, 8'h25, 8'h2A, 8'h4A, 8'h6A, 8'h4A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2A, 8'h2A, 8'h2E, 8'h2E, 8'h2A, 8'h2A, 8'h2F, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h4F, 8'h6E, 8'h93, 8'hB7, 8'hB3, 8'h8E, 8'h4A },
{8'h25, 8'h25, 8'h25, 8'h29, 8'h2A, 8'h4A, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2A, 8'h2E, 8'h2F, 8'h2E, 8'h2A, 8'h2E, 8'h2F, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h4A, 8'h4A, 8'h8E, 8'h93, 8'h4A, 8'h25 },
{8'h25, 8'h25, 8'h25, 8'h29, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h4A, 8'h4A, 8'h2A, 8'h2E, 8'h2E, 8'h2E, 8'h2E, 8'h2A, 8'h2A, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h6E, 8'hB7, 8'h2A, 8'h25 },
{8'h25, 8'h25, 8'h25, 8'h25, 8'h25, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h4E, 8'h4A, 8'h2A, 8'h2A, 8'h4A, 8'h4E, 8'h2E, 8'h2A, 8'h2A, 8'h2E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h6E, 8'h4E, 8'h01 },
{8'h24, 8'h25, 8'h25, 8'h25, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2E, 8'h4A, 8'h2A, 8'h2A, 8'h4E, 8'h6E, 8'h4E, 8'h4E, 8'h4E, 8'h4E, 8'h2A, 8'h2A, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h05, 8'h25, 8'h25, 8'h25, 8'h00 },
{8'h24, 8'h04, 8'h25, 8'h25, 8'h2A, 8'h26, 8'h2A, 8'h2A, 8'h2A, 8'h2E, 8'h2E, 8'h2A, 8'h2A, 8'h4A, 8'h4E, 8'h72, 8'h72, 8'h73, 8'h4F, 8'h2E, 8'h4E, 8'h2A, 8'h2A, 8'h26, 8'h26, 8'h26, 8'h25, 8'h25, 8'h25, 8'h05, 8'h00, 8'h00 }
};

//assign BG_RGB =  {redBits , greenBits , blueBits} ; //collect color nibbles to an 8 bit word 

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
always_ff@(posedge clk or negedge resetN)
begin
	if(!resetN) begin
				redBits <= DARK_COLOR ;	
				greenBits <= DARK_COLOR  ;	
				blueBits <= DARK_COLOR ;	 
	end 
	else begin
		BG_RGB <= object_colors[pixelY%32][pixelX%32]; 
	
	
	
	
	/*
	// defaults 
		greenBits <= DARK_COLOR ; 
		redBits <= DARK_COLOR ;
		blueBits <= DARK_COLOR;
					
	// draw the yellow borders 
		if (pixelX == 0 || pixelY == 0  || pixelX == xFrameSize || pixelY == yFrameSize)
			begin 
				redBits <= DARK_COLOR ;	
				greenBits <= DARK_COLOR ;	
				blueBits <= LIGHT_COLOR ;	// 3rd bit will be truncked
			end
		// draw  four lines with "bracketOffset" offset from the border 
		
		if (pixelX == bracketOffset ||
						pixelY == bracketOffset ||
						pixelX == xFrameSize-bracketOffset || 
						pixelY == yFrameSize-bracketOffset) 
			begin 
					redBits <= DARK_COLOR ;	
					greenBits <= DARK_COLOR  ;	
					blueBits <= DARK_COLOR ;	 
			end
	
	// note numbers can be used inline if they appear only once 
			
		if (pixelX > 156 && pixelY >= 256 ) // rectangles on part of the screen 
					redBits <= DARK_COLOR ; 
				 
				
		if (pixelX <  220 && pixelY < 350 ) 
					greenBits <= 3'b011 ; 
							
		if (pixelX <  300 && pixelY < 200 )   
					blueBits <= 2'b10  ; 
				 	   
		*/
	end; 	
end 

endmodule

